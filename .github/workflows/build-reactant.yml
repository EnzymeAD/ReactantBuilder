name: Build Reactant_jll

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  build-reactant-jll:
    name: BinaryBuilderBase - ${{ matrix.os }} - Julia ${{ matrix.julia_version }}
    runs-on: ${{ matrix.os }}

    container:
      image: ${{ (contains(matrix.os, 'linux') && 'ghcr.io/enzymead/reactant-docker-images@sha256:91e1edb7a7c869d5a70db06e417f22907be0e67ca86641d48adcea221fedc674' ) || '' }}
      options: --privileged

    strategy:
      fail-fast: false
      matrix:
        os:
          - jll
        julia_version:
          - '1.11'

    env:
      BINARYBUILDER_AUTOMATIC_APPLE: true
      BINARYBUILDER_RUNNER: privileged
      BINARYBUILDER_USE_CCACHE: true
      JULIA_REGISTRYCI_AUTOMERGE: true
      BUILD_PROJECT: H/HelloWorldC

    steps:
      - name: Set JULIA_PROJECT
        # We have to use `${GITHUB_WORKSPACE}` instead of `github.workspace` because GitHub
        # is terrible and the two don't match inside containers:
        # https://github.com/actions/runner/issues/2058
        run:
          echo "JULIA_PROJECT=${GITHUB_WORKSPACE}/.ci" >> "${GITHUB_ENV}"
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia_version }}
      - name: Load Julia packages from cache
        id: julia-cache
        uses: julia-actions/cache@v2
      - name: Instantiate environment
        timeout-minutes: 20
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.instantiate()
      - name: Generate list of platforms
        shell: julia --color=yes {0}
        # Adapted from <https://github.com/JuliaPackaging/Yggdrasil/blob/e6019028ad8dafb9507b9d9f4d09d04b11640461/.buildkite/generator.jl>.
        run: |
          TEMP = mktempdir()
          NAME = basename("${{ env.BUILD_PROJECT }}")
          exec(cmd) = @assert success(pipeline(cmd; stderr=stderr, stdout=stdout))
          julia(args) = `$(Base.julia_cmd()) $(args)`

          cd("${{ env.BUILD_PROJECT }}") do
              @info "Generating meta.json..."
              JSON_PATH = "$(TEMP)/$(NAME).meta.json"
              julia(`--compile=min ./build_tarballs.jl --meta-json="$(JSON_PATH)"`) |> exec

              # Generate platforms
              julia(`$(ENV["GITHUB_WORKSPACE"])/.ci/generate_platforms.jl "$(JSON_PATH)" $(TEMP)/$(NAME).platforms.list`) |> exec
          end

          PLATFORMS = split(readchomp(joinpath(TEMP, "$(NAME).platforms.list")))
          if isempty(PLATFORMS)
              @error "Unable to determine the proper platforms" NAME
          end

          @info "" PLATFORMS

          platforms = "platforms=[$(join(repr.(PLATFORMS), ','))]"
          @info "" platforms

          open(ENV["GITHUB_OUTPUT"], "a") do io
              println(io, platforms)
          end
      - name: Build Reactant
        run: |
          julia --color=yes --threads=16 build_tarballs.jl --verbose
        working-directory: ${{ env.BUILD_PROJECT }}
